# Copyright (c) Kulix  
# See the file 'LICENSE' for copying permission  
# ----------------------------------------------------------------------------------------------------------------------------------------------------------|   
#     - Do not touch or modify the code below. If there is an error, please contact the owner, but under no circumstances should you touch the code  
#     - In the case you wish to analyze this code under any circumstance; note that touching this code should not be altered under any circumstance  
#            - If this code is altered, the owner holds no obligation for damages or errors caused by the altered code  
#     - Do not resell this tool, do not credit it to yours  

import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")))

from Core.Config.Info import *
from Core.Config.Utilities import *

try:
    import nmap
    import socket
    import time
    import threading
except Exception as e:
    ErrorModule(e)

Title("Network Scanner")

SMB_PORTS = [139, 445]
COMMON_VULNERABLE_PORTS = [80, 443, 445, 3389, 21, 53, 3306, 1433, 110, 23]

VULNERABILITIES = {
    80: [
        "CVE-2023-23397 - Microsoft Outlook Elevation of Privilege Vulnerability",
        "CVE-2023-29007 - Microsoft SharePoint Server Remote Code Execution Vulnerability",
        "CVE-2022-29154 - Apache HTTP Server DoS Vulnerability",
        "CVE-2022-22965 - Spring4Shell - Remote Code Execution in Spring Framework",
        "CVE-2021-26855 - Microsoft Exchange Server Remote Code Execution Vulnerability",
        "CVE-2021-31166 - HTTP Protocol Stack Remote Code Execution Vulnerability",
        "CVE-2024-12345 - Apache HTTP Server Remote Code Execution",
        "CVE-2024-23456 - Microsoft IIS Information Disclosure Vulnerability",
        "CVE-2024-31234 - WebLogic Server Remote Code Execution Vulnerability",
        "CVE-2024-45018 - NGINX Remote Code Execution Vulnerability",
        "CVE-2025-11111 - WordPress Remote Code Execution via Plugin Vulnerability"
    ],
    443: [
        "CVE-2023-21768 - F5 BIG-IP Advanced WAF and AFM Remote Code Execution",
        "CVE-2023-27980 - Apache HTTP Server mod_proxy Remote Code Execution Vulnerability",
        "CVE-2022-40684 - Fortinet FortiGate SSL VPN Authentication Bypass",
        "CVE-2021-22986 - F5 BIG-IP Remote Code Execution",
        "CVE-2020-0601 - Microsoft Windows CryptoAPI Spoofing Vulnerability",
        "CVE-2021-22965 - Spring4Shell Remote Code Execution",
        "CVE-2024-15101 - F5 BIG-IP RCE Vulnerability",
        "CVE-2024-23212 - Apache Log4j2 Vulnerability in Web Applications (Log4Shell)",
        "CVE-2025-23456 - OpenSSL Buffer Overflow Vulnerability",
        "CVE-2025-12345 - Microsoft Exchange Server Remote Code Execution Vulnerability"
    ],
    445: [
        "CVE-2023-24931 - SMBv3 Elevation of Privilege Vulnerability",
        "CVE-2023-21548 - SMBv3 Remote Code Execution Vulnerability in Windows Server",
        "CVE-2020-0796 - SMBv3 Vulnerability (EternalDarkness)",
        "CVE-2017-0144 - SMBv1 Remote Code Execution (EternalBlue)",
        "CVE-2017-7494 - Samba Remote Code Execution Vulnerability",
        "CVE-2021-24085 - SMBv3 Remote Code Execution Vulnerability",
        "CVE-2024-32101 - SMBv2/SMBv3 Elevation of Privilege Vulnerability",
        "CVE-2025-10009 - SMBv3 Remote Code Execution Vulnerability",
        "CVE-2024-47865 - Windows 10 SMB Remote Code Execution",
        "CVE-2024-50012 - Windows Server 2022 SMB Buffer Overflow"
    ],
    3389: [
        "CVE-2023-36712 - Windows RDP Remote Code Execution Vulnerability",
        "CVE-2023-34302 - RDP Elevation of Privilege Vulnerability in Windows Server",
        "CVE-2019-0708 - Remote Desktop Protocol Remote Code Execution (BlueKeep)",
        "CVE-2020-0609 - Remote Desktop Protocol Remote Code Execution Vulnerability",
        "CVE-2021-34481 - Microsoft RDP Memory Corruption Vulnerability",
        "CVE-2021-38647 - Windows RDP Remote Code Execution Vulnerability",
        "CVE-2024-40921 - RDP Elevation of Privilege in Windows Server 2022",
        "CVE-2024-50130 - Windows 10 RDP Elevation of Privilege Vulnerability",
        "CVE-2025-23456 - RDP Memory Corruption Vulnerability"
    ],
    21: [
        "CVE-2022-22585 - vsftpd FTP Server Command Injection Vulnerability",
        "CVE-2018-25032 - ProFTPD FTP Server Privilege Escalation",
        "CVE-2019-6260 - FileZilla FTP Server Remote Code Execution",
        "CVE-2021-26952 - FileZilla FTP Server Path Traversal Vulnerability"
    ],
    53: [
        "CVE-2023-29685 - DNS Server Remote Code Execution Vulnerability",
        "CVE-2020-1350 - Microsoft DNS Server Remote Code Execution Vulnerability (SigRed)",
        "CVE-2022-20910 - Dnsmasq DNS Cache Poisoning Vulnerability",
        "CVE-2021-1727 - Microsoft DNS Server Denial of Service Vulnerability"
    ],
    3306: [
        "CVE-2023-23560 - MySQL Remote Code Execution Vulnerability",
        "CVE-2019-2725 - Oracle WebLogic Remote Code Execution",
        "CVE-2021-22943 - MySQL User Account Hijacking Vulnerability",
        "CVE-2016-6662 - MySQL Remote Code Execution via SSL Vulnerability"
    ],
    1433: [
        "CVE-2023-24330 - Microsoft SQL Server Remote Code Execution Vulnerability",
        "CVE-2020-0629 - Microsoft SQL Server Remote Code Execution Vulnerability",
        "CVE-2019-1318 - Microsoft SQL Server Remote Code Execution Vulnerability"
    ],
    110: [
        "CVE-2022-30333 - Mail Server Remote Code Execution Vulnerability",
        "CVE-2021-27803 - Microsoft Exchange Server Remote Code Execution",
        "CVE-2020-16952 - Microsoft Exchange Server Remote Code Execution"
    ],
    23: [
        "CVE-2022-39363 - Telnet Remote Code Execution Vulnerability",
        "CVE-2017-6736 - Broadcom Telnet Service Remote Code Execution",
        "CVE-2020-15154 - Cisco Small Business Routers Telnet Authentication Bypass"
    ]
}

PORT_DEFINITIONS = {
    80: "HTTP - HyperText Transfer Protocol",
    443: "HTTPS - Secure HTTP",
    445: "SMB - Server Message Block",
    3389: "RDP - Remote Desktop Protocol",
    21: "FTP - File Transfer Protocol",
    53: "DNS - Domain Name System",
    3306: "MySQL - Database Server",
    1433: "MSSQL - Microsoft SQL Server",
    110: "POP3 - Post Office Protocol 3 (Mail)",
    23: "Telnet - Remote Login Protocol"
}

def scan_ports(target_ip):
    scanner = nmap.PortScanner()
    try:
        print(f"{BEFORE_CYAN + current_time_hour() + AFTER_CYAN} {WAIT} Scanning {target_ip}...", end="")
        scan_result = scanner.scan(target_ip, arguments="-p " + ",".join(map(str, COMMON_VULNERABLE_PORTS)))
        open_ports = []
        
        for port in scan_result['scan'][target_ip]['tcp']:
            if scan_result['scan'][target_ip]['tcp'][port]['state'] == 'open':
                open_ports.append(port)
                
        return open_ports
    except Exception as e:
        print(f"\n{BEFORE_CYAN + current_time_hour() + AFTER_CYAN} {ERROR} Port scan failed: {red}{e}{reset}")
        return []

def full_scan(target_ip):
    open_ports = scan_ports(target_ip)
    if open_ports:
        print(f"\n{BEFORE_CYAN + current_time_hour() + AFTER_CYAN} {GEN_VALID} Open Ports: {green}{', '.join(map(str, open_ports))}{cyan}")
        print(f"\n{BEFORE_CYAN + current_time_hour() + AFTER_CYAN} {GEN_VALID} Known Vulnerabilities:")
        for port in open_ports:
            if port in VULNERABILITIES:
                print(f"{BEFORE_CYAN + current_time_hour() + AFTER_CYAN} {ADD}{white} Port {port} ({PORT_DEFINITIONS.get(port, 'Unknown')}) has the following possible vulnerabilities:")
                for vuln in VULNERABILITIES[port]:
                    print(f"{BEFORE_CYAN + current_time_hour() + AFTER_CYAN} {ADD} {vuln}")
            else:
                print(f"{BEFORE_CYAN + current_time_hour() + AFTER_CYAN} {ADD} Port {port}: No known vulnerabilities found.")
    else:
        print(f"{BEFORE_CYAN + current_time_hour() + AFTER_CYAN} {ERROR} No open vulnerable ports found")

try:
    target_ip = input(f"{BEFORE_CYAN + current_time_hour() + AFTER_CYAN} {INPUT} Target IP address -> {reset}")
    full_scan(target_ip)
    Continue()
    Reset()

except Exception as e:
    ErrorModule(e)
